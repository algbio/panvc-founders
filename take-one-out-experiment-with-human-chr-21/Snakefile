def output_names():
	def helper():
		for wf in ["baseline", "panvc"]:
			for sample in ["HG00513", "HG00731", "NA12273", "NA18954", "NA19238"]:
				for cov in [10, 20, 50]:
					for vc in ["gatk", "samtools"]:
						yield f"hap.py/{wf}-{sample}-cov{cov}-{vc}.summary.csv"
	return [x for x in helper()]


wildcard_constraints:
	sample = "(HG00513|HG00731|NA12273|NA18954|NA19238)"


rule all:
	input: output_names()


rule extract_vcf_sample:
	message:	"Extracting sample from VCF"
	conda:		"../envs/vcfcat.yaml"
	input:		"ALL.chr21.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf"
	output:		"{sample}.vcf"
	shell:		"vcfcat  --input={input} --sample={wildcards.sample} | sed -e 's/^21/chr21/;s/^##contig=<ID=21/##contig=<ID=chr21/' > {output}"


rule extract_chr21:
	message:	"Copying chr21 sequence"
	conda:		"../panvc-sample-workflow/workflow/envs/panvc.yaml"
	input:		"hs37d5.fa"
	output:		"chr21.fa"
	script:		"extract_chr21.py"


rule index_chr21:
	message:	"Indexing FASTA"
	conda:		"../panvc-sample-workflow/workflow/envs/panvc.yaml"
	input:		"chr21.fa"
	output:		"chr21.fa.fai"
	shell:		"samtools faidx {input}"


rule add_contig_header:
	message:	"Adding missing contig headers"
	input:		"call/{sample}-cov{cov}/ext_vc/pg_variants.{vc}.vcf"
	output:		"call/{sample}-cov{cov}/ext_vc/pg_variants.{vc}.fixed.vcf"
	run:
		assert 1 == len(input)
		assert 1 == len(output)
		with open(input[0], "r") as src, open(output[0], "w") as dst:
			for line in src:
				if line.startswith("#CHROM"):
					dst.write("##contig=<ID=chr21,length=48129895>\n")
				dst.write(line)


rule run_hap_py_baseline:
	message:		"Running hap.py with baseline variants"
	conda:			"../envs/happy.yaml"
	threads:		2
	input:
		reference	= "chr21.fa",
		faidx		= "chr21.fa.fai",
		truth_vcf	= "{sample}.vcf",
		query_vcf	= "call/{sample}-cov{cov}/baseline_vc/variants.{vc}.vcf"
	output:			"hap.py/baseline-{sample}-cov{cov}-{vc}.summary.csv"
	shell:	"hap.py --verbose --threads {threads} -r {input.reference} -o hap.py/baseline-{wildcards.sample}-cov{wildcards.cov}-{wildcards.vc} {input.truth_vcf} {input.query_vcf}"


rule run_hap_py_panvc:
	message:		"Running hap.py with PanVC variants"
	conda:			"../envs/happy.yaml"
	threads:		2
	input:
		reference	= "chr21.fa",
		faidx		= "chr21.fa.fai",
		truth_vcf	= "{sample}.vcf",
		query_vcf	= "call/{sample}-cov{cov}/ext_vc/pg_variants.{vc}.fixed.vcf"
	output:			"hap.py/panvc-{sample}-cov{cov}-{vc}.summary.csv"
	shell:	"hap.py --verbose --threads {threads} -r {input.reference} -o hap.py/panvc-{wildcards.sample}-cov{wildcards.cov}-{wildcards.vc} {input.truth_vcf} {input.query_vcf}"
